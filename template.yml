AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Yet Another Crypto Grid Bot (for AWS Lambda)

Resources:
  synctickers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: synctickers.lambda_handler
      Runtime: python3.8
      CodeUri: function/
      Description: Call a crypto exchange, pull OHLCV data and put in dynamodb
      Timeout: 20
      MemorySize: 256
      AutoPublishAlias: prod
      Environment:
        Variables:
          AWS_PS_GROUP: prod
          AWS_PS_MAX_AGE: 120
          TABLE_MARKET: !Ref Market
          TABLE_OHLCV: !Ref OHLCV
      # Function's execution role
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: yacgb/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Market
        - DynamoDBCrudPolicy:
            TableName: !Ref OHLCV
      Tracing: Active
      Layers:
        - !Ref libs
      Events:
        EveryMinute:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  backtest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: backtest.lambda_handler
      Runtime: python3.8
      CodeUri: function/
      Description: Using historical OHLCV data in dynamodb, test crypto gbot parameters 
      Timeout: 800
      MemorySize: 1024
      AutoPublishAlias: prod
      Environment:
        Variables:
          AWS_PS_GROUP: prod
          AWS_PS_MAX_AGE: 300
          TABLE_MARKET: !Ref Market
          TABLE_OHLCV: !Ref OHLCV
          TABLE_GBOT: !Ref Gbot
          TABLE_ORDERS: !Ref Orders
      # Function's execution role
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: yacgb/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Gbot
        - DynamoDBCrudPolicy:
            TableName: !Ref Orders
        - DynamoDBReadPolicy:
            TableName: !Ref Market
        - DynamoDBReadPolicy:
            TableName: !Ref OHLCV
      Tracing: Active
      Layers:
        - !Ref libs
  liveinit:
    Type: AWS::Serverless::Function
    Properties:
      Handler: liveinit.lambda_handler
      Runtime: python3.8
      CodeUri: function/
      Description: Setup a new gbot running against a live account on an exchange
      Timeout: 30
      MemorySize: 256
      AutoPublishAlias: prod
      Environment:
        Variables:
          AWS_PS_GROUP: prod
          AWS_PS_MAX_AGE: 30
          TABLE_MARKET: !Ref Market
          TABLE_OHLCV: !Ref OHLCV
          TABLE_GBOT: !Ref Gbot
          TABLE_ORDERS: !Ref Orders
      # Function's execution role
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: yacgb/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Gbot
        - DynamoDBCrudPolicy:
            TableName: !Ref Orders
        - DynamoDBReadPolicy:
            TableName: !Ref Market
        - DynamoDBReadPolicy:
            TableName: !Ref OHLCV
      Tracing: Active
      Layers:
        - !Ref libs
  liverun:
    Type: AWS::Serverless::Function
    Properties:
      Handler: liverun.lambda_handler
      Runtime: python3.8
      CodeUri: function/
      Description: Run a gbot periodically to execute new trades based on its configuration
      Timeout: 20
      MemorySize: 256
      AutoPublishAlias: prod
      Environment:
        Variables:
          AWS_PS_GROUP: prod
          AWS_PS_MAX_AGE: 14400
          TABLE_MARKET: !Ref Market
          TABLE_OHLCV: !Ref OHLCV
          TABLE_GBOT: !Ref Gbot
          TABLE_ORDERS: !Ref Orders
      # Function's execution role
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: yacgb/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Gbot
        - DynamoDBCrudPolicy:
            TableName: !Ref Orders
        - DynamoDBReadPolicy:
            TableName: !Ref Market
        - DynamoDBReadPolicy:
            TableName: !Ref OHLCV
      Tracing: Active
      Layers:
        - !Ref libs
      Events:
        EveryMinute:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  api:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api.lambda_handler
      Runtime: python3.8
      CodeUri: function/
      Description: Setup a new gbot running against a live account on an exchange
      Timeout: 30
      MemorySize: 256
      AutoPublishAlias: prod
      Environment:
        Variables:
          AWS_PS_GROUP: prod
          AWS_PS_MAX_AGE: 300
          TABLE_MARKET: !Ref Market
          TABLE_OHLCV: !Ref OHLCV
          TABLE_GBOT: !Ref Gbot
          TABLE_ORDERS: !Ref Orders
      # Function's execution role
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: yacgb/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Gbot
        - DynamoDBCrudPolicy:
            TableName: !Ref Orders
        - DynamoDBReadPolicy:
            TableName: !Ref Market
        - DynamoDBReadPolicy:
            TableName: !Ref OHLCV
      Tracing: Active
      Layers:
        - !Ref libs
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: yacgb-lib
      Description: Dependencies for the yacgb app
      ContentUri: yacgb-layer
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8
  Market:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "exchange"
          AttributeType: "S"
        - AttributeName: "market"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "exchange"
          KeyType: "HASH"
        - AttributeName: "market"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  OHLCV:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "ex_market_tf"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "ex_market_tf"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
  Gbot:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "gbotid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "gbotid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  Orders:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "ex_orderid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ex_orderid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3